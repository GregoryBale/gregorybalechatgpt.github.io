async function tryGenerateImage(api, prompt) {
    try {
        const response = await fetch(api.url + encodeURIComponent(prompt), { method: 'GET' });
        const data = await response.json();

        if (data.ok && data.url) {
            return { ok: true, url: data.url, model: api.name };
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç API
        console.warn(`API ${api.name} –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:`, data);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å API ${api.name}:`, error);
    }
    return { ok: false };
}

async function generateImage(prompt) {
    const shuffledApis = [...imageGenerationApis].sort(() => Math.random() - 0.5);

    for (const api of shuffledApis) {
        const result = await tryGenerateImage(api, prompt);
        if (result.ok) {
            return result;
        }
    }

    return { ok: false, error: "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API." };
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π
window.handleImageGeneration = async function (message) {
    const prompt = message.slice(7).trim(); // –£–¥–∞–ª—è–µ–º '/image ' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    addMessage(`üñå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${prompt}"`, false);

    try {
        const imageResult = await generateImage(prompt);

        if (imageResult.ok) {
            const imageMessage = `
                <img src="${imageResult.url}" alt="üñå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; height: auto;">
                <p class="model-info" style="font-size: 0.8em; color: #666; margin-top: 5px;">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏: ${imageResult.model}</p>
                <a href="${imageResult.url}" download="generated_image.png" class="download-button">–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>
            `;
            addMessage(imageMessage, false);
        } else {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", imageResult.error);
            addMessage("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", false);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        addMessage("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", false);
    }
};
