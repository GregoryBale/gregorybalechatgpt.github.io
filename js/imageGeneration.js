// –ú–∞—Å—Å–∏–≤ API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const translationApis = [
    'https://api.paxsenix.biz.id/ai/gemma?text=',
    'https://api.paxsenix.biz.id/ai/qwen2?text=',
    'https://api.paxsenix.biz.id/ai/phi3?text=',
    'https://api.paxsenix.biz.id/ai/gemini?text=',
    'https://api.paxsenix.biz.id/ai/gpt4o?text=',
    'https://api.paxsenix.biz.id/ai/gpt4omni?text=',
    'https://api.paxsenix.biz.id/ai/gpt4?text=',
    'https://api.paxsenix.biz.id/ai/gpt3?text=',
    'https://api.paxsenix.biz.id/ai/llama?text=',
    'https://api.paxsenix.biz.id/ai/nemotron?text=',
    'https://api.paxsenix.biz.id/ai/llama3.1-70B?text='
];

async function tryTranslate(api, text) {
    try {
        const response = await fetch(api + encodeURIComponent(`–ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: ${text}`));
        const data = await response.json();
        
        if (data.ok && data.response) {
            return {
                ok: true,
                text: data.response.replace(/^"|"$/g, '') // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
            };
        }
    } catch (error) {
        console.error(`Error with API ${api}:`, error);
    }
    return { ok: false };
}

async function translateText(text) {
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ API —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    const shuffledApis = [...translationApis].sort(() => Math.random() - 0.5);

    for (const api of shuffledApis) {
        const result = await tryTranslate(api, text);
        if (result.ok) {
            return result;
        }
    }
    return { ok: false, error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API." };
}

async function tryGenerateImage(api, prompt) {
    try {
        const response = await fetch(api.url + encodeURIComponent(prompt));
        const data = await response.json();
        
        if (data.ok && data.url) {
            return { ok: true, url: data.url, model: api.name };
        }
    } catch (error) {
        console.error(`Error with ${api.name}:`, error);
    }
    return { ok: false };
}

async function generateImage(prompt) {
    const shuffledApis = [...imageGenerationApis].sort(() => Math.random() - 0.5);

    for (const api of shuffledApis) {
        const result = await tryGenerateImage(api, prompt);
        if (result.ok) {
            return result;
        }
    }

    return { ok: false, error: "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API." };
}

window.handleImageGeneration = async function(message) {
    const prompt = message.slice(7).trim();
    addMessage(`üñå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${prompt}"`, false);

    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–Ω—ã–µ API
        const translationResult = await translateText(prompt);
        
        if (translationResult.ok) {
            const englishPrompt = translationResult.text;
            const imageResult = await generateImage(englishPrompt);
            
            if (imageResult.ok) {
                const imageMessage = `
                    <img src="${imageResult.url}" alt="üñå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; height: auto;">
                    <p class="model-info" style="font-size: 0.8em; color: #666; margin-top: 5px;">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏: ${imageResult.model}</p>
                    <a href="${imageResult.url}" download="generated_image.png" class="download-button">–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>
                `;
                addMessage(imageMessage, false);
            } else {
                addMessage("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", false);
            }
        } else {
            addMessage("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", false);
        }
    } catch (error) {
        console.error('Error:', error);
        addMessage("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", false);
    }
};
